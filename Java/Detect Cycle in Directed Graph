import java.util.*;
import java.lang.*;

class DriverClass {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int V = sc.nextInt();
            int E = sc.nextInt();
            for (int i = 0; i < V; i++)
                list.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
            }
            if (new Solution().isCyclic(V, list) == true)
                System.out.println("1");
            else
                System.out.println("0");
        }
    }
}

class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        int vis[] = new int[V]; // for visited we will mark it as 1
        int dfs[]=new int[V];
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                if(checkCycle(i,vis,dfs,adj)==true)
                    return true; // if the function return true then it means that there is a cycle
            }
        }
        return false; // if no cycle found
    }

    public boolean checkCycle(int node,int[] vis,int[] dfs,ArrayList<ArrayList<Integer>> adj){
        vis[node]=1;
        dfs[node]=1;
        for(int it:adj.get(node)){
            if(vis[it]==0){
                if(checkCycle(it,vis,dfs,adj)==true) return true;
            }else if(dfs[it]==1)
                return true;
        }
        dfs[node]=0; //again making the node unvisited if no cycle is found
        return false;
    }
}
